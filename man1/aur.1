'\" t
.TH AUR 1 2019-03-03 AURUTILS
.SH NAME
aur \- helper tool for the arch user repository

.SH DESCRIPTION
.BR aur (1)
is the command wrapper for
.BR aurutils ,
a collection of scripts to automate usage of the Arch User
Repository. Different tasks such as update checks, package searching,
and computing dependencies are split to seperate commands.

The chosen approach for managing packages is local pacman
repositories, instead of foreign (installed by
.BR "pacman -U" )
packages.

A brief overview of local repositories is given in the
.B "CREATING A LOCAL REPOSITORY"
section.

.SH AUR COMMANDS
The below gives a short overview; see the respective documentation for
details.
.BR aur (1)
searches for commands in
.BR /usr/lib/aurutils/
by default, followed by
.B $PATH
as set in the environment.

A different path may be set at build time through the
.B AUR_LIB_DIR
macro, for example
.IR /usr/local/lib/aurutils:/usr/lib/aurutils .

.P
.BR aur\-build (1)
.RS 4
Build packages to a local repository.
.RE

.P
.BR aur\-chroot (1)
.RS 4
Build packages in a chroot.
.RE

.P
.BR aur\-depends (1)
.RS 4
Retrieve dependencies using aurweb.
.RE

.P
.BR aur\-fetch (1)
.RS 4
Fetch packages from a location.
.RE

.P
.BR aur\-graph (1)
.RS 4
Print package/dependency directed graph.
.RE

.P
.BR aur\-pkglist (1)
.RS 4
Print the AUR package list.
.RE

.P
.BR aur\-repo (1)
.RS 4
Manage local repositories.
.RE

.P
.BR aur\-repo\-filter (1)
.RS 4
Filter packages in the Arch Linux repositories.
.RE

.P
.BR aur\-search (1)
.RS 4
Search for AUR packages.
.RE

.P
.BR aur\-srcver (1)
.RS 4
List version of VCS packages.
.RE

.P
.BR aur\-sync (1)
.RS 4
Download and build AUR packages automatically.
.RE

.P
.BR aur\-vercmp (1)
.RS 4
Check packages for AUR updates.
.RE

.SH EXIT STATUS
Programs follow a subset of errno(3), or preserve command status where
applicable.

.SH ENVIRONMENT
.TP
.B AUR_COLOR
Output colorization can be controlled by setting this environment variable
to
.B always
to force colorization on,
.B auto
to colorize output only if both \fBstdout\fR and \fBstderr\fR are connected to
a terminal, while
.B never
or any unrecognized value will disable colorization completely. The default value is
.BR auto .

.SH CREATING A LOCAL REPOSITORY
A local repository may be configured directly in
.BR /etc/pacman.conf ,
or in a separate file specified with the
.B Include
directive. This section documents an example configuration; for
details, consult the
.BR pacman.conf (5)
man page.

.SY Note:
Avoid naming the repository
.IR local ,
as this name is reserved by
.BR pacman (8).

.SY Tip:
Consider separate repositories for different purposes, such as
version control packages.
.YS

.SS Pacman configuration
.P
For the purposes of this example, we assume the local repository
.I custom
is located in
.IR /home/custompkgs .

Append a section for the local repository to
.IR /etc/pacman.conf
.EX

  [custom]
  SigLevel = Optional TrustAll
  Server = file:///home/custompkgs

.EE
Create the repository root and database:
.EX

  $ sudo install -d /home/custompkgs -o $USER
  $ repo-add /home/custompkgs/custom.db.tar

.EE
If built packages are available, add them to the database:
.EX

  $ cd /home/custompkgs
  $ repo-add -n custom.db.tar ./*.pkg.tar.xz

.EE
Synchronize pacman:
.EX

  $ sudo pacman -Syu

.EE

.SS CacheDir (optional)
When packages from a local repository are installed through
.BR "pacman -S" ,
they are copied to a cache directory (usually
.IR /var/cache/pacman/pkg )
by
.BR pacman .
Besides using additional space, this may result in checksum mismatches
when rebuilding packages without increasing
.BR pkgrel .
(See GitHub issue #85)

There are several ways to avoid this. A first approach is to set the
repository path as a
.B pacman
.IR CacheDir ,
together with the
.B "CleanMethod = KeepCurrent"
setting to avoid unexpected deletion of built packages with
.BR "pacman -Sc" .

This can be done by editing
.IR /etc/pacman.conf
as follows:
.EX

  [options]
  CacheDir = /var/cache/pacman/pkg
  CacheDir = /var/cache/pacman/custom
  CleanMethod = KeepCurrent

.EE
Note that
.BR "pacman -Scc"
will remove packages regardless of the
.B CleanMethod
setting.

.SH EXAMPLES
In this section, we assume that
.BR bash (1)
is the interactive shell.

.SS Arch User Repository
Run actions on the dependency tree of an AUR package:
.EX

  $ echo foo | aur depends | while read -r pkg; do ... done

.EE
Build
.I plasma-desktop-git
and its dependencies with
.BR chroot (1):
.EX

  $ aur sync -c plasma-desktop-git

.EE
Update all AUR packages in a single local repository:
.EX

  $ aur sync -u

.EE
Check foreign packages for AUR updates:
.EX

  $ pacman -Qm | aur vercmp

.EE
Check the
.I custom
repository for AUR updates:
.EX

  $ aur repo -d custom --list | aur vercmp

.EE
If
.B pacman.conf
only contains one local repository, the above may be shortened to:
.EX

  $ aur repo --upgrades

.EE

.SS Arch User Repository - advanced usage
Print packages from the
.I custom
repository that are unavailable in the AUR:
.EX

  $ grep -Fxvf <(aur pkglist) <(pacman -Slq custom)

.EE
As above, but for orphaned packages:
.EX

  $ pacman -Slq custom | aur rpc -t info | \\
       jq -r '.[].results[] | select(.Maintainer == null)'

.EE
Update packages in the
.I custom
repository which are installed on the host:
.EX

  $ grep -Fxf <(pacman -Qq) <(pacman -Slq custom) > installed.txt
  $ xargs -a installed.txt aur sync --repo=custom

.EE
Search for AUR packages with both
.I wm
and
.I git
in the name:
.EX

  $ aur pkglist -P '(?=.*wm)(?=.*git)' | xargs aur search -i

.EE
Select an AUR package with name matching
.IR pony ,
and build the result:
.EX

  $ select a in $(aur pkglist -F pony); do aur sync "$a"; break; done

.EE

.SS Official repositories
.EE
Print Perl modules that are both in the AUR and official repositories:
.EX

  $ aur pkglist -P '^perl-.+' > perl.txt
  $ grep -Fxf <(aur repo-filter < perl.txt) perl.txt

.EE
Print packages both in AUR and
.I [community]
and compare their versions:
.EX

  $ aur repo -d community --all

.EE

.SS Using PKGBUILDs
Build packages in the
.I pkgbuilds
github repository (generating required
.B .SRCINFO
files):
.EX

  $ git clone https://www.github.com/Earnestly/pkgbuilds
  $ cd pkgbuilds
  $ find -name PKGBUILD -execdir sh -c 'makepkg --printsrcinfo > .SRCINFO' \\;

  $ aur graph */.SRCINFO | tsort | tac > queue # Remove unwanted targets
  $ aur build -a queue

Build a package for a different architecture, here \fIi686\fR:
.EX

  $ setarch i686 aur sync -c --repo=custom_i686 tclkit

.EE

.SS Custom commands
The following scripts are examples of custom commands added anywhere
in $PATH, for example
.IR /usr/local/bin .

.BR aur\-gc

.EX
  #!/bin/bash
  # Remove unused build files in aur-sync cache
  readonly XDG_CACHE_HOME=${XDG_CACHE_HOME:-$HOME/.cache}
  readonly AURDEST=${AURDEST:-$XDG_CACHE_HOME/aurutils/sync}
  
  # Assumes build files were retrieved through git(1)
  find "$AURDEST" -name .git -execdir git clean -xf \\;
  
  # Print directories which do not contain a PKGBUILD file
  for d in "$AURDEST"/*; do
    [[ -f $d/PKGBUILD ]] || printf '%s\\n' "$d"
  done
.EE

.BR aur\-remove

.EX
  #!/bin/bash
  # alternative to 'repoctl remove' which loops over all local repositories
  package=$1

  aur repo --repo-list | while read -r repo_path; do
    # remove package from database
    repo-remove "$(readlink -e "$repo_path")" "$package"

    # remove all versions of package
    find "$(dirname "$repo_path")" -name "$package*" -delete
  done

  # remove package from system
  if expac -Q '%n' "$package" >/dev/null; then
    sudo pacman -R "$package"
  fi
.EE

.SS Using third-party helpers
Repository packages can be "made foreign" by temporarily removing the
repository from the pacman configuration. This can be used with programs
that support the
.B PACMAN
environment variable and check foreign packages for AUR updates.

For example, create the
.I mypacman
script in
.IR /usr/local/bin/mypacman :
.EX

 #!/bin/sh
 pacman --config=/usr/share/devtools/pacman-extra.conf "$@"

.EE
and point the
.B PACMAN
variable towards it:
.EX

 $ export PACMAN=/usr/local/bin/mypacman

.EE

.SH AUTHORS
.MT https://github.com/AladW
Alad Wenter
.ME

.\" vim: set textwidth=72
